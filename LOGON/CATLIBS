/* rexx */
/*-------------------------------------------------------------------*/
/* call this with 'driver=drivermem,writejcl=anything,trace=anything'*/
/* this must be done before signal novalue is set so the user won't  */
/* have to remember to put quotes on the values.                     */
/*-------------------------------------------------------------------*/
/* this will take a parm string, break it up at each comma, and      */
/* execute the result, so it will take:                              */
/* WRITEJCL=Y,TRACE=Y,DRIVER=@BASE                                   */
/* break the line into three commands, and interpret them to set the */
/* fields to the values specified. this is a lazy way to pass parms, */
/* but it works in a pinch.                                          */
/*-------------------------------------------------------------------*/
Parse value '' with driver writejcl trace   /* init our vars */
Arg parms .
Do while parms <> ''
  Parse var parms parm ',' parms /* chop off at next comma           */
  Interpret parm                 /* execute 'writejcl=y' or whatever */
End
If writejcl = '' then writejcl = 0
Else writejcl = 1
If trace = '' then trace = 0
Else trace = 1

Signal On Failure
Signal On Syntax
Signal On Novalue
Signal On Halt

Call Main_Routine

Return
/*-------------------------------------------------------------------*/
/*- handle any problems encountered.                                -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(12);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Halted on line"          Sigl; Call Cleanup; Exit(12);
Cleanup:
Do While Queued() > 0; Pull; End;
Call Free_Logon_Parmlibs
Return
/*-------------------------------------------------------------------*/
/*- This exec is used to allocate product libraries to a tso/ispf   -*/
/*- session.                                                        -*/
/*-------------------------------------------------------------------*/
/*- arguments to this exec:                                         -*/
/*- * driver is the initial member and has a list of include members-*/
/*-     to read in.                                                 -*/
/*- * writejcl is used to generate jcl instead of doing allocates.  -*/
/*-     it can be set to anything to turn this on. you can run this -*/
/*-     exec from within ispf if you have this parm set as it won't -*/
/*-     try to do any allocates.                                    -*/
/*- * trace turns on internal messages to follow the logic.         -*/
/*-     it can be set to anything to turn this on.                  -*/
/*-------------------------------------------------------------------*/
/*- parms to set below:                                             -*/
/*- * allocUnit is the allocation unit for work datasets for non-sms-*/
/*-     shops. can be set to storage group or null for sms shops.   -*/
/*- * sysLogonParmlib is the system parmlib name that contains the  -*/
/*-     prodcut include libs and driver members.                    -*/
/*- * userLogonParmlib is the override lib name that allows         -*/
/*-     individual users to customize their logon allocations.      -*/
/*- * ispfProf is the clist/exec used to allocate the ispf ISPPROF  -*/
/*-     dataset, and this must reside in it same libarary as this.  -*/
/*-------------------------------------------------------------------*/
Main_Routine:

Address TSO

/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!! start of global variables that need to be reviewed.           !!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/* work allocation unit for non-sms shops. null it for sms, or else */
/* set it to a storage group if you don't use acs routines.         */
allocUnit = 'UNIT(3390)'

/* the name this exec looks for to find a user override lib */
userLogonParmlib = "'"Sysvar('SYSUID')".TSO.LOGON.PARMLIB'"

/* the name this exec looks for to find the system parm lib */
sysLogonParmlib = ,
  "'MA133.TSO.LOGON."Mvsvar("SYSNAME")".PARMLIB'"
If Sysdsn(sysLogonParmlib) <> 'OK' Then
  sysLogonParmlib = "'MA133.TSO.LOGON.PARMLIB'"
If Sysdsn(sysLogonParmlib) <> 'OK' Then
  sysLogonParmlib = userLogonParmlib

/* the name this exec looks for to run the ISPF profile alloc clist*/
ispfProf = "ISPFPROF"
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!! end   of global variables that need to be reviewed.           !!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

/* make sure we're in a valid environ */
If writeJcL = 0 & Sysvar('SYSISPF') = 'ACTIVE' then do
  Say 'This exec cannot be run from within ISPF.'
  Say 'It will reallocate ISPF libraries.'
  Say 'Specify WRITEJCL=Y to run within ISPF for testing purposes.'
  Return
End

/* we're ready to rock */
Call Allocate_Profile
Call Allocate_Logon_Parmlibs
Call Merge_Driver_Members
Call Read_Include_Members
Call Read_Startup_Member
Call Free_Logon_Parmlibs
Call Allocate_Tso_Libs
Call Queue_Startup_Command

Return
/*-------------------------------------------------------------------*/
/* Allocate the parmlibs                                             */
/*-------------------------------------------------------------------*/
Allocate_Profile:

/* assume that the ispf profile allocation exec is in the same      */
/* dataset that CATLIBS is in. this is so we don't have to alloc an */
/* initial SYSPROC to our logon.                                    */
If writejcl then return
Parse source . . . . logonLib .
"EX '"logonLib"("ispfProf")'"

Return
/*-------------------------------------------------------------------*/
/* Allocate the parmlibs                                             */
/*-------------------------------------------------------------------*/
Allocate_Logon_Parmlibs:

/* if there's a user parmlib, concat it ahead of the system parm */
If Sysdsn(userLogonParmlib) = "OK" Then
  "ALLOC F(SYSUT1) DA(" ,
    userLogonParmlib ,
    sysLogonParmlib ,
    ") SHR"
Else "ALLOC F(SYSUT1) DA("sysLogonParmlib") SHR"
If RC > 0 then Signal Failure

/* allocate the rest of the datasets required by iebptpch */
"ALLOC F(SYSUT2) NEW DELETE SPACE(2 2) TRACKS" ,
  "DSORG(PS) RECFM(F B) LRECL(80)"
If RC > 0 then Signal Failure

"ALLOC F(SYSPRINT) NEW DELETE REU" ,
  allocUnit "SPACE(5 5) TRACKS" ,
  "LRECL(121) DSORG(PS) RECFM(F B)"
If RC > 0 then Signal Failure

"ALLOC F(SYSIN)  NEW DELETE REU" ,
  allocUnit "SPACE(1 1) TRACKS" ,
  "LRECL(80) DSORG(PS) RECFM(F B)"
If RC > 0 then Signal Failure

Return
/*-------------------------------------------------------------------*/
/* free the parmlibs.                                                */
/*-------------------------------------------------------------------*/
Free_Logon_Parmlibs:

/* free the iebptpch libs */
"FREE F(SYSUT1 SYSUT2 SYSPRINT SYSIN)"

Return
/*-------------------------------------------------------------------*/
/* merge all the drivers to get a merged list of members to include. */
/*-------------------------------------------------------------------*/
/* this will take each MERGE command and read in the specified member*/
/* so that the resultant include list is in the proper order. say:   */
/*    @BASE has the following:                                       */
/*      INCLUDE BASE1                                                */
/*      INCLUDE BASE2                                                */
/*    @DEVELOP has the following:                                    */
/*      INCLUDE DEVELOP1                                             */
/*      MERGE @BASE                                                  */
/*      INCLUDE DEVELOP2                                             */
/* the results of this merge would be:                               */
/*      INCLUDE DEVELOP1                                             */
/*      INCLUDE BASE1                                                */
/*      INCLUDE BASE2                                                */
/*      INCLUDE DEVELOP2                                             */
/*-------------------------------------------------------------------*/
Merge_Driver_Members:

If trace then Say 'Preparing to merge all driver members.'

initDriver = Proc_To_Driver()

If trace then Say 'Reading in initial driver' initDriver'.'

/* read it in to driver.@develop.x as in above example */
Call Load_Driver initDriver
If driver.initDriver.0 = 0 then do /* nothing got read missing member */
  Say 'Initial driver' member 'is empty or not found.'
  Signal Failure
End

/* start off a master include list as inclList.0.x */
Do iDriver = 1 to driver.initDriver.0
  inclList.0.iDriver = driver.initDriver.iDriver
End
inclList.0.0 = driver.initDriver.0

If trace then Say 'Reading in merged drivers.'

iCurrPass = 0
mergeDone = 0
startMem = ""
Do until mergeDone
  Call Merge_Drivers
End

If trace then do
  Say 'Drivers merged. Listing follows...'
  Do iInclList = 1 to inclList.iCurrPass.0
    Say inclList.iCurrPass.iInclList
  End
  Say
End

Return
/*-------------------------------------------------------------------*/
/* do this one at a time for each 'MERGE' command encountered.       */
/*-------------------------------------------------------------------*/
/* copy the array and bump up the second array index each time.      */
/* copy the array and merge in the members to the new array like so: */
/*   inclList.0.x for the first pass, then:                          */
/*   inclList.1.x for the second, then:                              */
/*   inclList.2.x for the third etc.                                 */
/* this is the only way i could figure out how to do this quickly.   */
/*-------------------------------------------------------------------*/
Merge_Drivers:

mergeDone = 1            /* merge is done when no more merges found*/
iPrevPass = iCurrPass
iCurrPass = iCurrPass + 1
iCurrIncl = 0
Do iPrevIncl = 1 to inclList.iPrevPass.0
  Parse var inclList.iPrevPass.iPrevIncl merge member .

  /* store the last startup member found in the merge list for   */
  /* later processing. just storing it for now.                  */
  If merge = 'STARTCMD' then startMem = member

  /* if this is not a merge statement, simply copy the previous  */
  /* pass to the current array. if we did a merge already, then  */
  /* that's all we do for this pass, we simply copy then pick    */
  /* up the next merge in the next pass.                         */
  If mergeDone = 0 | merge <> 'MERGE' then do
    iCurrIncl = iCurrIncl + 1
    inclList.iCurrPass.iCurrIncl = inclList.iPrevPass.iPrevIncl
  End

  Else do
    /* if we already merged in this member (merged twice), there */
    /* will be a driver.member.0 var already. prevents loops.    */
    If Symbol('driver.'member'.0') = 'VAR' then do
      Say 'Driver' member 'was included more than once. Skipped.'
      Iterate
    End
    Call Load_Driver member    /* load up our new merged member */
    If driver.member.0 = 0 then do
      Say 'Driver' member 'empty or not found. Skipped.'
      Iterate
    End
    mergeDone = 0         /* we ain't dun yit */
    /* add the new merge member to the current array before adding */
    /* the remaining previous pass records to the current array.   */
    Do iDriver = 1 to driver.member.0
      iCurrIncl = iCurrIncl + 1
      inclList.iCurrPass.iCurrIncl = driver.member.iDriver
    End
  End

End
inclList.iCurrPass.0 = iCurrIncl
/* may as well drop the previous one since it's useless now. */
Drop inclList.iPrevPass.

Return
/*-------------------------------------------------------------------*/
/* load a driver member into memory.                                */
/*-------------------------------------------------------------------*/
Load_Driver:
Arg member .

If trace then Say 'Reading in driver member' member'.'

/* load up a driver member into an array for processing */
Drop readMember.
Call Add_Read_Member member
Call Read_Members
Do iRecord = 1 to record.0
  driver.member.iRecord = record.iRecord
End
driver.member.0 = record.0

Return
/*-------------------------------------------------------------------*/
/* read the proc-to-driver member and return an initial driver.     */
/*-------------------------------------------------------------------*/
Proc_To_Driver:

/* read in the proc-to-driver member */
Drop readMember.
Call Add_Read_Member '$PRC2DRV'
Call Read_Members

userProc = Sysvar('SYSPROC')  /* find out what proc we're running */

/* if the user's tsoproc matches one of the records, return it. */
Do iRecord = 1 to record.0
  Parse Var record.iRecord proc driver .
  If proc = userProc Then Return driver
End

Return '@BASIC'
/*-------------------------------------------------------------------*/
/* read the include members called from the driver members.          */
/*-------------------------------------------------------------------*/
/* we have a long list of product include members now. so now we have*/
/* to read them in so that we end up with a long list of dds, e.g.:  */
/*    ISPPLIB 'ISP.ISPPLIB'                                          */
/*    ISPMLIB 'ISP.ISPMLIB'                                          */
/*    ISPPLIB 'SYS2.SOMEPRODUCT.ISPPLIB'                             */
/*    ISPMLIB 'SYS2.SOMEPRODUCT.ISPPLIB'                             */
/*-------------------------------------------------------------------*/
Read_Include_Members:

If trace then Say 'Reading in all include members.'

/* add each include member to the list of members to be read */
/* by iebptpch                                               */
Drop readMember.
Call Add_Read_Member 'USERFRST'
Do iIncl = 1 to inclList.iCurrPass.0
  Parse var inclList.iCurrPass.iIncl include member .
  If include <> 'INCLUDE' then iterate
  If Symbol('inclChk.'member) = 'VAR' then do
    Say 'Include member' member 'was included more than once. Skipped.'
    Iterate
  End
  inclChk.member = ''
  Call Add_Read_Member member
End
Call Add_Read_Member 'USERLAST'
Call Read_Members
Drop inclChk.
Drop inclList.

/* make the dd's listed in the form of inclList.x */
If trace then Say 'Include members read. Listing follows...'
iInclList = 0
Do iRecord = 1 to record.0
  iInclList = iInclList + 1
  inclList.iInclList = record.iRecord
  If trace then Say inclList.iInclList
End
inclList.0 = iInclList
If trace then Say

Return
/*-------------------------------------------------------------------*/
/* convert the include list into dd name concatenations.             */
/*-------------------------------------------------------------------*/
/* form another set of arrays from the inclList.x above. they will be*/
/*    ddNames.1 = 'ISPPLIB' (say)                                    */
/*    ddNames.2 = 'ISPLLIB' as necessary, and each dd here will have */
/* its own array as follows:                                         */
/*    dd.ISPPLIB.1 = 'ISP.ISPPLIB'                                   */
/*    dd.ISPPLIB.2 = 'SYS2.SOMEPRODUCT.ISPPLIB'                      */
/*    dd.ISPLLIB.1 = 'ISP.ISPLLIB'                                   */
/*    dd.ISPLLIB.2 = 'SYS2.SOMEPRODUCT.ISPLLIB'                      */
/* at the end we simply loop thru ddNames.x, and for each one, loop  */
/* thru dd.ddName.x to allocate the dds.                             */
/*-------------------------------------------------------------------*/
Allocate_Tso_Libs:

If trace then
  Say 'Converting include list to DD names and' ,
    'executing inline commands.'

/* loop thru the dd and dsn list produced above */
iddNames = 0
Do iInclList = 1 To inclList.0
  Parse var inclList.iInclList ddName dsn .
  /* if this is an OFF or ON command, it's not actually a DD but   */
  /* really an inline command. OFF means you don't want to see the */
  /* results, ON means you do. so to free a dataset that probably  */
  /* isn't allocated you'd say "OFF 'FREE F(XXX)'". see the        */
  /* PRODUCT product parm for more details.                        */
  If ddName = "OFF" | ddName = "ON" then do
    Parse var inclList.iInclList onOff action
    Call Do_Inline_Command onOff action
    Iterate
  End

  /* this is the first time we've seen this dd, start a new array */
  /* in the form of dd.ddName.x */
  If Symbol('dd.'ddName'.0') <> 'VAR' then do
    If trace then Say 'Adding new DD name:' ddName
    dd.ddName.0 = 0
    iddNames = iddNames + 1
    ddNames.iddNames = ddName
  End

  i = dd.ddName.0
  i = i + 1
  dd.ddName.0 = i
  If Left(dsn,1) = '"' then Interpret "Dsn =" dsn
  dd.ddName.i = dsn
End
ddNames.0 = iddNames
/* inline commands may have specified USERVAR.x, drop them now */
/* see PRODUCT product member for more details. */
Drop UserVar.

If writejcl then do
  Call Write_Jcl
  Return
End

If trace then Say 'Allocating libraries.'

/* take each ddname found and allocate all the libs collected up */
/* for that ddname.                                              */
Do iddNames = 1 to ddNames.0
  ddName = ddNames.iddNames
  /* if the allocation fails, redrive it with the extra overhead */
  /* of seeing if the datasets exist first */
  If Do_Allocate(ddName) > 0 then Call Do_Allocate ddName 1
End

Return
/*-------------------------------------------------------------------*/
/* do an inline command.                                             */
/*-------------------------------------------------------------------*/
Do_Inline_Command:
Arg onOff action

If writejcl then return
If trace then do
  Say 'Executing inline command:'
  Say action
End

/* turn message level off or on based on what user wants */
x = Msg(onOff)
/* turn off signal trapping so it's less prone to error. */
Signal Off Novalue;Signal Off Failure;Signal Off Syntax

Interpret action

/* weez dun. set 'er back. */
Signal On Syntax;Signal On Failure;Signal On Novalue
x = Msg(x)

Return
/*-------------------------------------------------------------------*/
/* do the tso allocations.                                           */
/*-------------------------------------------------------------------*/
/* this will take a passed ddname and spin thru the dd.ddName.x array*/
/* and execute a corresponding tso allocate command. if check is 1   */
/* then we already tried this allocation and it failed. so this time */
/* carefully check all the dsns to see if there's a problem with them*/
/*-------------------------------------------------------------------*/
Do_Allocate:
Arg ddName check .
allocRet = 0

If trace then Say 'Processing allocation for' ddName

If check = 1 then Do
  frame = Copies('!',79)
  Say frame
  Say 'Attempting to recover from allocation failure for DD' ddName'.'
  Say 'Offending datasets will be removed from allocation.'
End

x = Msg('OFF')
"FREE F("ddName")"
x = Msg(x)

/* allocate a long string of datasets separated by a space, e.g. */
/*  'sys1.ispplib' 'xyz.abc' 'a123.b123' etc.                    */
alloc = ""
Do iDD = 1 to dd.ddName.0
  dsn = dd.ddName.iDD
  If check = 1 then do
    status = Sysdsn(dsn)
    If status <> 'OK' then do
      Say 'Dsn status for' dsn 'is' status'.'
      Iterate
    End
  End
  If trace then Say '    ' dsn
  alloc = alloc || dsn || ' '
End

/* make sure there is something to allocate for this dd. there can be*/
/* none when checking the dsns removed all datasets from this dd.    */
If alloc <> '' then do
  "ALLOC F("ddName") DA("alloc") SHR"
  allocRet = RC
End
Else Say 'No datasets to allocate to DD' ddName'. Skipping.'

If check = 1 then Do
  Say 'Return code from recovered DD' ddName 'is:' allocRet
  Say frame
  Say
End

Return allocRet
/*-------------------------------------------------------------------*/
/* read the last startup member read from the drivers members.       */
/*-------------------------------------------------------------------*/
/* the very last STARTCMD read from the @drivers was stored above.   */
/* we have finished allocating all the ispf datasets, now it's time  */
/* to read in whatever goodies are there.                            */
/*-------------------------------------------------------------------*/
Read_Startup_Member:

iStartCmd = 0
If startMem <> "" then do
  If trace then
    Say 'Last startup member read from merged drivers is:' startMem'.'
  Drop readMember.
  Call Add_Read_Member startMem
  Call Read_Members
  Do iRecord = 1 to record.0
    iStartCmd = iStartCmd + 1
    startCmd.iStartCmd = record.iRecord
  End
  If trace then do
    If record.0 > 0 then
      Say 'Startup member read.'
    Else Say 'No commands found in startup member.'
    Say
  End
End
startCmd.0 = iStartCmd

If startCmd.0 = 0 then do
  If trace then Say "No startup commands found, defaulting to 'ISPF'."
  startCmd.0 = 1
  startCmd.1 = 'ISPF NOLOGO'
End

Return
/*-------------------------------------------------------------------*/
/* queue the startup commands to execute.                            */
/*-------------------------------------------------------------------*/
/* queue the commands to the external data queue so that they will   */
/* run when this command finishes executing. this is to ensure that  */
/* this large rexx with its many variables is all freed up before    */
/* starting ispf. if we started ispf here, all that storage would    */
/* be wasted while inside ispf.                                      */
/*-------------------------------------------------------------------*/
Queue_Startup_Command:

If writejcl then return
If trace then Say 'Issuing startup command.'

/* make sure any continued commands (ending with '-' or '+') */
/* are concatentated together to make up one big command. */
cmd = ''
Do iStartCmd = 1 to startCmd.0
  cmd = cmd startCmd.iStartCmd
  cmd = Strip(cmd)
  lastChar = Right(cmd,1)
  If lastChar <> '-' & lastChar /= '+' then do
    Queue cmd
    cmd = ''
  End
  else cmd = Strip(cmd,'T',lastChar)
End
Drop startCmd.

Return
/*-------------------------------------------------------------------*/
/* write out the jcl.                                                */
/*-------------------------------------------------------------------*/
/* just gonna write out the jcl so you can see what it is doing.     */
/*-------------------------------------------------------------------*/
Write_Jcl:

Do iddNames = 1 To ddNames.0
  ddName = ddNames.iddNames
  If dd.ddName.0 = 0 then iterate
  dsn = dd.ddName.1
  Call Write_Dsn_Status
  dsn = Strip(dsn,"B","'")
  dsn = "DD  DISP=SHR,DSN="dsn
  Queue Overlay(dsn,"//"ddName,12)
  Do iDsn = 2 to dd.ddName.0
    dsn = dd.ddName.iDsn
    Call Write_Dsn_Status
    dsn = Strip(dsn,"B","'")
    dsn = "DD  DISP=SHR,DSN="dsn
    Queue Overlay(dsn,"//",12)
  End
End

userProc = Sysvar('SYSPROC')  /* find out what proc we're running */

outputJcl = "'"Sysvar('SYSUID')"."userProc".JCL'"
x = Msg('OFF')
"DELETE" outputJcl
x = Msg(x)
"ALLOC F(OUTPUT) DA("outputJcl") NEW CATALOG" ,
  allocUnit "SPACE(1 1) TRACKS" ,
  "LRECL(80) DSORG(PS) RECFM(F B)"
"EXECIO " Queued() "DISKW OUTPUT (FINIS"
"FREE F(OUTPUT)"
Say 'JCL written to' outputJcl

Return
/*-------------------------------------------------------------------*/
/* check the status of the dsn as it is being written out            */
/*-------------------------------------------------------------------*/
Write_Dsn_Status:

status = sysdsn(dsn)
If status <> 'OK' then
  Queue '//* following dataset status is:' status

Return
/*-------------------------------------------------------------------*/
/* add a member to the list to read in.                              */
/*-------------------------------------------------------------------*/
Add_Read_Member:
Arg member

If Symbol('readMember.0') = 'LIT' Then readMember.0 = 0
readMember.0 = readMember.0 + 1
iReadMember = readMember.0
readMember.iReadMember = member

Return
/*-------------------------------------------------------------------*/
/* invoke ibm futility to read in a bunch of members.                */
/*-------------------------------------------------------------------*/
/* this will read in the members into a record.x array. comments and */
/* blank lines are removed, along with iebptpch report headers. that */
/* way i don't have to worry about these things in the rest of this. */
/*-------------------------------------------------------------------*/
Read_Members:

Drop record.
Queue '  PRINT TYPORG=PO,MAXNAME=200,MAXFLDS=200'
Do iReadMember = 1 to readMember.0
  Queue '  MEMBER NAME='readMember.iReadMember
  Queue '  RECORD FIELD=(72)'
End
"EXECIO" Queued() "DISKW SYSIN (FINIS"
"CALL *(IEBPTPCH)"

/* tell user what happened if a non-zero return code occured */
If RC > 0 then do
  Say 'Return code' RC 'from IEBPTPCH.'
  Say 'Check for error messages in the output...'
  "EXECIO * DISKR SYSPRINT (STEM sysprint. FINIS"
  Do iSysprint = 1 To sysprint.0
    If Left(sysprint.iSysprint,1) = '1' then iterate
    Say Left(sysprint.iSysprint,79)
  End
  Say 'Output from IEBPTPCH complete.'
  Say
End

/* queue everything up in the record.x array */
iRecord = 0
"EXECIO * DISKR SYSUT2 (FINIS"
Do while Queued() > 0
  Pull header record
  If header = 1 then iterate
  If header = 'MEMBER' then iterate
  If header = '' then iterate
  If Left(header,1) = '*' then iterate
  iRecord = iRecord + 1
  record.iRecord = header record
  Upper record.iRecord
End
record.0 = iRecord

Return
