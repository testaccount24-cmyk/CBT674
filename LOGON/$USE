/*********************************************************************/
/* CatLibs Parmlibs                                                  */
/*********************************************************************/
Logon parmlibs are used to allocate products and user datasets to your
TSO session before ISPF is started. MA133.TSO.LOGON.system.PARMLIB is
read by default, and userid.TSO.LOGON.PARMLIB is read if it is found.
PDS members in the user parmlib will override the system parmlib
members.

To customize your ISPF session to the way you want, simply allocate
userid.TSO.LOGON.PARMLIB with the same attributes as, but smaller than,
MA133.TSO.LOGON.sys.PARMLIB (standard 80-column PDS). Then create
members in this lib to make the logon exec do what you want.

Examples:
* To place your own set of libraries ahead of the standard libs, create
  a member called USERFRST in your customized parmlib. Specify in here
  all the extra libraries you need, including your buddy's libs, with
  their corresponding DDs. Logon again and bob's your uncle. For
  example, to add 'JOE.SYSPROC' at the start of the clist libraries,
  specify in this member:
    | SYSPROC 'JOE.SYSPROC'

* To place your own set of libraries at the end of the standard libs,
  create a member called USERLAST in your customized parmlib.

* To test a new version of PRODUCTx, create a member called PRODUCTx in
  your parmlib, and copy the PRODUCTx member from the system parmlib.
  Update the dataset names to the new libraries and logon again. The
  exec will automatically pick up *YOUR* PRODUCTx libraries.

* To add a new product to your logon that is not in the standard logons,
  create the product member in your parmlib, specifying the DDNAMEs and
  DSNs required. Then copy the driver member you execute from this
  parmlib (@BASIC or whatever), and add in your product library at the
  spot you choose. See the $PRC2DRV member for details on what driver
  members are for.

* To change the way ISPF starts, create an override member that you
  execute (such as #BASIC), and make your alterations to the ISPF
  startup command there.  See the $README member for details on startup
  members.

* To create an automatic logoff command, so that when you exit ISPF
  you are automatically logged off, create a custom STARTCMD member
  (as in the previous example) and add a 'LOGOFF' command after the
  ISPF start command. (There are other ways of acheiving the same
  result, this is just to illustrate what you can do with this).

* To create JCL that shows how the libs are allocated, you can pass
  'WRITEJCL=Y' to the logon exec, e.g.:
    | TSO EX 'MA133.TSO.LOGON(CATLIBS)' 'WRITEJCL=Y'
  A dataset will be allocated and the DDs will be dumped to it, which
  you can later edit. When run in this way, you can execute it from
  within ISPF as no allocations will be performed. This can be used to
  test your changes before you attempt to logon. It can also be used to
  convert from using CatLibs if someone wants to do so at a later time.
