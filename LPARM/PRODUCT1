* this shows an example of special requirements that a product needs
* beyond simple concatenation of libraries. commands can be entered to
* control how CATLIBS will operate. in this example, a user variable
* called USERVAR.1 is set first, then a free is done, followed by an
* allocate command that uses the USERVAR.1 variable as part of its
* command. the 'ON' and 'OFF' parms control whether or not messages are
* sent to your screen to show you the results of the commands (this is
* passed to the MSG() function in rexx parlance). in this case, we're
* not interested in seeing the results of the 'FREE' command since the
* files probably aren't allocated anyway, and we'd end up seeing
* unnecessary warning messages each time we logged on. user variables
* should be in the form or USERVAR.x to ensure that you don't interfere
* with the internal variables in the CATLIBS. results would be pretty
* unpredictable otherwise.
ON  USERVAR.1="SPACE(2,2) TRACKS"
OFF "FREE F(FILE1 FILE2)"
ON  "ALLOC F(FILE1) NEW REUSE UNIT(PUBLIC)" USERVAR.1
ON  "ALLOC F(FILE2) NEW REUSE UNIT(PUBLIC)" USERVAR.1
*
SYSPROC 'SYSX.FILE.CLIST'
