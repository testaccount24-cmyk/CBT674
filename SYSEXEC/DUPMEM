/* rexx */
Arg DDName .

Signal On Failure
Signal On Syntax
Signal On Novalue

Call Main_Routine

Return
/*-------------------------------------------------------------------*/
/*- handle any problems encountered                                 -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(-1);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(-1);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(-1);
Cleanup:
Return
/*-------------------------------------------------------------------*/
/*- The main exec routine.                                          -*/
/*-------------------------------------------------------------------*/
Main_Routine:

VolUnit = 'UNIT(3390) VOL(CHANGE)'
VolUnit = ''

Header = Copies('*',72)

x = Outtrap('Dsn.')
Select
  When DDName = 'LINKLIST' Then "%LISTLINK"
  When DDName = 'LPALIST'  Then "%LISTLPA"
  Otherwise "%LISTCNCT" DDName
End
x = Outtrap('OFF')

Do iDsn = 1 To Dsn.0
  x = Outtrap('Mem.')
  "%LISTMEM '"Dsn.iDsn"'"
  x = Outtrap('OFF')
  Do iMem = 1 To Mem.0
    Parse Var Mem.iMem Mem Alias .
    Mem = Translate(Mem,'?','{')
    /* load Dsn.x.IEFBR14 with index */
    Dsn.iDsn.Mem = iMem
    /* load Dsn.x.y with IEFBR14 */
    Dsn.iDsn.iMem = Mem Alias
  End
  Dsn.iDsn.0 = Mem.0
  Dsn.iDsn.dbDel.0 = 0
End

Say Header
Say '* The following' Dsn.0 ,
  'datasets were found in concatenation' DDName':'
Say Header
Do iDsn = 1 To Dsn.0
  Say Right(iDsn,4) Dsn.iDsn
End
Say Header
Say

Say Header
Say '* The following duplicate members were found:'
Say Header
Say 'Member    Lib Dataset'
Do iDsn = 1 To Dsn.0
  Do iMem = 1 To Dsn.iDsn.0
    Parse Var Dsn.iDsn.iMem Mem Alias .
    If Mem = '$$$COIBM' Then Iterate
    FoundSym = Symbol('FoundDup.Mem')
    If FoundSym = 'BAD' Then Do
      Say Left(Mem,8) Right(iDsn,4) Dsn.iDsn ,
        'Must be checked manually.'
      Iterate
    End
    If FoundSym = 'VAR' Then Iterate

    Do jDsn = iDsn + 1 To Dsn.0
      If Symbol('Dsn.'jDsn'.Mem') = 'LIT' Then Iterate
      If FoundSym = 'LIT' Then Do
        FoundDup.Mem = ''
        FoundSym = 'VAR'
        Rec = Left(Mem,8) Right(iDsn,4) Dsn.iDsn
        Say Rec
      End
      Say Left(' ',8) Right(jDsn,4) Dsn.jDsn
      iDel = Dsn.jDsn.dbDel.0 + 1
      Dsn.jDsn.dbDel.0 = iDel
      Dsn.jDsn.dbDel.iDel = Translate(Left(Mem,8),'{','?')
      Dsn.jDsn.dbAlias.iDel = Alias
      Dsn.jDsn.dbOrig.iDel = Dsn.iDsn
    End
  End
End
Say Header
Say


Say Header
Say '* Summary of deletes:'
Say Header
Rec = ' Lib Dataset'
Rec = Overlay("Deletes",Rec,51)
Say Rec
Do iDsn = 1 To Dsn.0
  If Dsn.iDsn.dbDel.0 = 0 Then Iterate
  Rec = Right(iDsn,4) Dsn.iDsn
  Rec = Overlay(Right(Dsn.iDsn.dbDel.0,4,' '),Rec,51)
  Say Rec
End
Say Header
Say

Say Header
Say '* Details of deletes:'
Say Header
Do iDsn = 2 To Dsn.0
  Deletes = Dsn.iDsn.dbDel.0
  If Deletes = 0 Then Iterate
  Say ' ' Dsn.iDsn", lib:" iDsn", deletions:" Deletes
  Say "    Member   (Alias of) First library in concatenation"
  Queue "LPDS '"Dsn.iDsn"'"
  Queue "VERIFY : NOUPDATE"
  Do iDel = 1 To Deletes
    Mem = Dsn.iDsn.dbDel.iDel
    Alias = Dsn.iDsn.dbAlias.iDel
    Rec = "    "Mem
    If Alias <> '' Then
      Rec = Overlay('('Alias')',Rec,14)
    Rec = Overlay(Dsn.iDsn.dbOrig.iDel,Rec,25)
    Say Rec
    Queue 'DEL' Mem
  End
  Queue "VERIFY : NOUPDATE"
  Queue 'END'
  Queue ' '
  Say
End
Say Header
Say

If Queued() = 0 Then Do
  Say 'Nothing to delete!'
  Return
End

OutFile = "'"Sysvar("SYSUID")".DUPMEM."DDName"'"
Say Header
Say '* PDSMAN delete statements contained in' OutFile
Say Header
Say

x = Msg('OFF')
"DELETE" Outfile
x = Msg(x)

"ALLOC F(OUT) DA("OutFile") NEW CATALOG" ,
  "LRECL(80) RECFM(F B) DSORG(PS) SPACE(1 1) TRACKS" VolUnit
"EXECIO" Queued() "DISKW OUT (FINIS"
"FREE F(OUT)"

If Sysvar('SYSENV') = 'FORE' Then "%FDSN" OutFile

Return
