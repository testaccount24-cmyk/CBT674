/* rexx */
Arg Job Func .

Signal On Failure
Signal On Syntax
Signal On Novalue

Call Main_Routine

Return
/*-------------------------------------------------------------------*/
/*- handle any problems encountered                                 -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(12);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(12);
Cleanup:
Return
/*-------------------------------------------------------------------*/
/*- This will find a job in the production jcl libraries.           -*/
/*-------------------------------------------------------------------*/
Main_Routine:

Parmlib = "MA133.TSO.PARMLIB(FJ)"

Address ISPEXEC
"VERASE FJJOB SHARED"

If Length(Job) = 1 Then Do
  Func = Job
  Job = ''
End

If Job = '' Then Do
  GETLINE = ''
  "VPUT GETLINE SHARED"
  "SELECT CMD(%GETLINE)"
  "VGET (CSR CSRP LINE SCRW PANEL) SHARED"
  UpperLine = Line
  Upper UpperLine
  CmdPos = Pos('COMMAND',UpperLine)
  If CmdPos = 0 | CmdPos > 3 Then Do
    If Pos('//',UpperLine) > 0 & Pos(' JOB ',UpperLine) > 0 Then Do
      Parse Var UpperLine '//' Job .
      Job = Strip(Job)
    End
    Else Do
      Do While CSRP > 1
        If Substr(Line,CSRP-1,1) = ' ' Then Leave
        CSRP = CSRP - 1
      End
      Job = Word(Substr(Line,CSRP),1)
      Job = Strip(Job,'L','/')
    End
  End
End

If Job = '' Then Do
  Say 'Enter the job name you want to find...'
  Pull Job
End
If Job = '' Then Do
  Say 'Job name is missing.'
  Return
End

Address TSO
"ALLOC F(IN) DA('"Parmlib"') SHR REUSE"
"EXECIO * DISKR IN (STEM Dsn. FINIS"
"FREE F(IN)"
Address ISPEXEC

Sysname = Mvsvar('SYSNAME')
Edit.0 = 0                                  /* add doc libs to search*/
Do iDsn = 1 To Dsn.0
  Dsn.iDsn = Strip(Dsn.iDsn)
  Upper Dsn.iDsn
  If Left(Dsn.iDsn,1) = '*' Then Iterate
  Parse Var Dsn.iDsn Sys Dsn .
  If Sys <> Sysname & Sys /= 'ALL' Then Iterate
  Dsn = Strip(Dsn,"B","'")
  Call CheckDsn Dsn
End

If Edit.0 = 0 Then Do
  Say 'Job' Job 'not found.'
  Return
End

If Edit.0 = 1 Then Do
  Dsn = Edit.1 || "(" || Job || ")"
  If Func = 'G' Then Do
    FJJOB = Dsn
    "VPUT FJJOB SHARED"
  End
  Else Call FDSN "'"Dsn"'" Func
  Return
End

Say Job 'was found in the following job libraries...'
Do iEdit = 1 To Edit.0
  Say iEdit Edit.iEdit
End
Say 'Reply with a valid library number, or anything else to quit.'
Pull Reply
Reply = Strip(Reply)
If Datatype(Reply,'N') = 1 & Reply > 0 & Reply <= Edit.0 Then Do
  Dsn = Edit.Reply || "(" || Job || ")"
  If Func = 'G' Then Do
    FJJOB = Dsn
    "VPUT FJJOB SHARED"
  End
  Else Call FDSN "'"Dsn"'" Func
End

Return
/*-------------------------------------------------------------------*/
/*- check to see if the dsn exists and edit it                      -*/
/*-------------------------------------------------------------------*/
CheckDsn:

Arg Dsn
CheckDsn = "'" || Dsn || "(" || Job || ")'"
If SYSDSN(CheckDsn) <> 'OK' Then Return
iEdit = Edit.0
iEdit = iEdit + 1
Edit.iEdit = Dsn
Edit.0 = iEdit

Return
