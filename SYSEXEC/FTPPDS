/* rexx */
Parse Arg ProfDsn Vars .  /* preserve lower case for password */

Signal On Failure
Signal On Syntax
Signal On Novalue

Call Main_Routine

Return
/*-------------------------------------------------------------------*/
/*- handle any problems encountered                                 -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(12);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(12);
Cleanup:
Do While Queued() > 0; Pull .; End;
Return
/*********************************************************************/
/* this rexx will copy a directory to a pds or a pds to a directory. */
/* a profile dataset (80 col records) holds the parms for the ftp    */
/* transfer. cut and paste the following parms from here to the prof.*/
/* the default name is FTP.PROFILE, but you can pass another name.   */
/*                                                                   */
/*   Flow = "SEND"/"RECEIVE"              * the direction            */
/*   Host = "10.1.20.136"                 * host name                */
/*   User = "ma133"                       * user name                */
/*   Pass = "xxxxx"                       * password                 */
/*   Mail = "email@junk.com"              * email addr for anonymous */
/*   Root = "C:\PTFS\"                    * the root dir to set      */
/*   RDir = "Unzip"                       * remote directory - root  */
/*   LPds = "FTP.TESTPDS"                 * the local pds            */
/*   Type = "I/A/E"                       * type of data             */
/*   Exit = "FTPPDSXR"                    * the dsn exit             */
/*   Each = "APARSTRP"                    * run this afterwards      */
/*   Run                                  * to run the ftp           */
/*   Alc1 = "TRACKS(10 10) DIR(5)"        * to alloc a new one       */
/*   Alc2 = "LRECL(80) RECFM(F B) DSORG(PO)"                         */
/*                                                                   */
/* 'Root' sets a prefix to all other RDir referred to so you won't   */
/*   have to spell out the entire RDir for each xfer. leave it set   */
/*   to null if you have not need to use it.                         */
/* 'Exit' specifies a rexx exec to be called for each of the members */
/*   of a directory. it's purpose is to parse the file name into a   */
/*   valid member name and set the transfer mode to text or binary.  */
/* 'Type', if specified, sets the type of transfer. you can set this */
/*   for each individual member by specifying a type in an exit.     */
/* 'Each', if specified, is a rexx exec to be run on all the members */
/*   of the new pds as a 'post-processing' action.                   */
/* 'Run', if specified, runs the previous ftp parms. this is to allow*/
/*   multiple ftp transfers in one deck. you can respecify specific  */
/*   parms such as host or local/remote files and place the run      */
/*   command after each change.                                      */
/* 'Pass' is the password. You can place this in the prof deck, pass */
/*   it as a parm, or, for foreground use only, leave it null and    */
/*   you will be prompted for it when needed.                        */
/* 'Alc1' and 'Alc2' are used to allocate a new pds when receiving.  */
/*   they are not checked or verified, are not prompted for, and     */
/*   default to the above values.                                    */
/*********************************************************************/
Main_Routine:

Address TSO
If Pos('=',ProfDsn) > 0 Then Do
  Vars = ProfDsn
  ProfDsn = ''
End
If ProfDsn = '' Then ProfDsn = "'"Sysvar("SYSUID")".FTP.PROFILE'"
Upper ProfDsn

/* init the profile vars to null */
Parse Value '' With ,
  Flow Host User Pass Mail Root RDir LPds Type Exit Each Alc1 Alc2

Envir = Sysvar('SYSENV')

Call Process_Profile

Return
/*********************************************************************/
/* load the profile vars                                             */
/*********************************************************************/
Process_Profile:

"ALLOC F(PROF) DA("ProfDsn") SHR"
"EXECIO * DISKR PROF (STEM Prof. FINIS"
If RC > 0 Then Signal Failure
"FREE F(PROF)"

/* strip off any comments or blank lines from the end. */
Do iProf = Prof.0 To 1 By -1
  Prof.iProf = Strip(Prof.iProf)
  If Left(Prof.iProf,1) = '*' | Prof.iProf = '' Then Iterate
  Leave
End
Prof.0 = iProf

/* if the last command is not "RUN", add it */
If Prof.0 > 0 Then Do
  iProf = Prof.0
  Var = Word(Prof.iProf,1)
  Upper Var
  If Var <> 'RUN' Then Do
    iProf = iProf + 1
    Prof.iProf = 'RUN'
    Prof.0 = iProf
  End
End

/* go thru each of the commands in the profile and process them */
Do iProf = 1 To Prof.0
  Prof.iProf = Strip(Prof.iProf)
  If Left(Prof.iProf,1) = '*' Then Iterate
  Parse Var Prof.iProf Var '=' Val '*' .
  If Var = '' Then Iterate
  Upper Var
  If Var = 'RUN' Then Do
    Call Prime_Vars
    Say 'Processing' Flow
    Say '  Local PDS: ' LPds
    Say '  Remote Dir:' Root || RDir
    Say
    If Flow = 'RECEIVE' Then Call Receive_Pds
    Else Call Send_Pds
  End
  Else Do
    Val = Strip(Val)
    Interpret Var '=' Val
  End
End

Return
/*********************************************************************/
/* send a pds to a directory.                                        */
/*********************************************************************/
Send_Pds:

x = Outtrap('Mem.')
"LISTD '"Lpds"' MEMBERS"
x = Outtrap('OFF')
Do iMem = 1 To Mem.0
  If Mem.iMem = "--MEMBERS--" Then Leave
End

/* queue commands to get the directory */
dir = RDir
If Root <> "" Then dir = Root || dir
Queue Host
Queue User Pass
Queue "CD" dir
Queue "LCD '"LPds"'"
If Type <> "" Then Queue "TYPE" Type
Do iMem = iMem + 1 To Mem.0
  Mem = Strip(Mem.iMem)
  /* call the exit to chop up the file name to a pds member */
  Interpret "Call" Exit "'"Mem Lpds dir Type"'"
End
Queue 'QUIT'

Call Do_Ftp

Return
/*********************************************************************/
/* receive a directory to a pds                                      */
/*********************************************************************/
Receive_Pds:

/* go get an initial directory listing to process */
dir = RDir
If Root <> "" Then dir = Root || dir
Queue Host
Queue User Pass
Queue 'CD' dir
Queue 'DIR (DISK'
Queue 'QUIT'
x = Outtrap("Junk")
"FTP"
x = Outtrap("OFF")

/* read in the listing returned from above */
FtpDOut = "'"Sysvar("SYSUID")".FTP.DIROUTP'"
"ALLOC F(LIST) DA("FtpDOut") SHR"
"EXECIO * DISKR LIST (STEM List. FINIS"
"FREE F(LIST)"

/* for testing purposes and parsing troubles, uncomment */
/* Call FDSN FtpDOut 'V' */
x = Msg('OFF')
"DELETE" FtpDOut
x = Msg(x)

/* queue commands to get the directory */
Queue Host
Queue User Pass
Queue "CD" dir
Queue "LCD '"LPds"'"
If Type <> "" Then Queue "TYPE" Type
Do iList = 1 To List.0
  List = Strip(List.iList)
  LastSpace = LastPos(' ',List)
  File = Substr(List,LastSpace+1)
  /* call the exit to chop up the file name to a pds member */
  Interpret "Call" Exit "'"File dir Lpds Type"'"
End
Queue 'QUIT'

Call Do_Ftp

/* run a rexx on all the members */
If Each <> '' Then Call EACHMEM "'"LPds"'" Each

Return
/*********************************************************************/
/* do the queued ftp commands and browse the results                 */
/*********************************************************************/
Do_Ftp:

/* go load the pds */
x = Outtrap("Ftp.")
"FTP"
x = Outtrap("OFF")

If Envir = 'FORE' Then Do
  /* browse the results */
  FtpOut = "'"Sysvar("SYSUID")".FTP.OUT'"
  "ALLOC F(FTP) DA("FtpOut") NEW CATALOG" ,
    "SPACE(5 5) TRACKS LRECL(80) RECFM(F B) DSORG(PS)"
  "EXECIO * DISKW FTP (STEM Ftp. FINIS"
  "FREE F(FTP)"
  Call FDSN FtpOut "B"
  x = Msg('OFF')
  "DELETE" FtpOut
  x = Msg(x)
End

Return
/*********************************************************************/
/* prime the profile vars                                            */
/*********************************************************************/
Prime_Vars:

/* process any overrides from the passed parms. do this each time */
/* so that each run will have the overrides applied.              */
TVars = Vars
Do While Words(TVars) > 0
  Parse Var TVars Var '=' Val ',' TVars
  Interpret Var '= "'Val'"'
End

If Alc1 = '' Then Alc1 = "TRACKS(10 10) DIR(5)"
If Alc2 = '' Then Alc2 = "LRECL(80) RECFM(F B) DSORG(PO)"

/* if the host prof var is null prompt for it */
Do While Flow <> 'SEND' & Flow <> 'RECEIVE'
  If Envir = 'BACK' Then Do
    Say 'Invalid required value for "Flow":' Flow
    Say 'Should be either "SEND" or "RECEIVE"'
    Signal Failure
  End
  Say 'Enter the direction of the transfer or QUIT to exit:'
  Say '  (Send or Receive)'
  Parse Pull Flow .
  If Flow = 'S' Then Flow = 'SEND'
  If Flow = 'R' Then Flow = 'RECEIVE'
  If Flow = 'QUIT' Then Exit
End

/* if the host prof var is null prompt for it */
Do While Host = ''
  If Envir = 'BACK' Then Do
    Say '"Host" cannot be null'
    Signal Failure
  End
  Say 'Enter host for ftp or QUIT to exit:'
  Parse Pull Host .
  If Host = 'QUIT' Then Exit
End

/* get a password if needed (may not be, depends on host) */
If User <> 'anonymous' Then Do
  If Pass = '' & Envir <> 'BACK' Then Do
    Say 'Enter password for' User 'on host' Host 'or QUIT to exit:'
    Parse Pull Pass .
    If Pass = 'QUIT' Then Exit
  End
End
Else Pass = Mail

/* get the local pds to dump the dir */
Do While LPds = ''
  If Envir = 'BACK' Then Do
    Say '"Lpds" cannot be null'
    Signal Failure
  End
  Say 'Enter existing pds in which to dump the dir or QUIT to exit:'
  Parse Pull LPds .
  If LPds = 'QUIT' Then Exit
End
Lpds = PrefDsn(Lpds)
Status = Sysdsn("'"LPds"'")
If Status = 'DATASET NOT FOUND' & Flow = 'RECEIVE' Then Do
  "ALLOC F(LPDS) DA('"Lpds"') NEW CATLG" Alc1 Alc2
  "FREE F(LPDS)"
  Status = Sysdsn("'"LPds"'")
End
If Status <> 'OK' Then Do
  Say 'Status of pds' LPds 'is' Status
  Signal Failure
End

/* get the remote directory */
Do While RDir = '' & Root = ''
  If Envir = 'BACK' Then Do
    Say '"Rdir" cannot be null'
    Signal Failure
  End
  Say 'Enter directory on remote host or QUIT to exit:'
  Parse Pull RDir .
  If RDir = 'QUIT' Then Exit
End

/* if exit is null default it */
If Exit = '' Then Exit = "FTPPDSX" || Left(Flow,1)

Return
