/* rexx */
Arg Dsn Func .

Signal On Failure
Signal On Syntax
Signal On Novalue

ReturnCode = 0
Call Main_Routine

Return ReturnCode
/*-------------------------------------------------------------------*/
/*- handle any problems encountered                                 -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(12);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(12);
Cleanup:
Return
/*-------------------------------------------------------------------*/
/*- This exec works in conjunction with the FP, FJ, FC, FD, and ZOOM-*/
/*- execs. a one char action code is passed with a dataset name, and-*/
/*- the dataset is acted on by the function passed.                 -*/
/*-------------------------------------------------------------------*/
Main_Routine:

If Dsn = '' Then Do
  ReturnCode = 4
  Return                          /* was the dsn passed? */
End

Address ISPEXEC
"VGET ZAPPLID"                    /*   Get current application ID */
If ZAPPLID \= 'ISR' Then Do       /*   If ZAPPLID\=ISR, re-invoke */
  "SELECT CMD(%FDSN" Dsn Func") NEWAPPL(ISR)"
  Exit RC                         /*   with NEWAPPL(ISR) so that  */
End                               /*   pfkeys will be predictable */

Dsn = Prefdsn(Dsn)

/* convert a gdg to the real name */
Parse Var Dsn '(' Gen ')'
If Datatype(Gen) = 'NUM' Then Do
  Dsn = GdgRel("'"Dsn"'")
  If Dsn = '' Then Signal Failure
End

/* see if the user set a default action */
FromProfile = 0
If Func = '' Then Do
  "VGET FDSNDEF PROFILE"
  If Rc = 0 Then Do
    FromProfile = 1
    Func = FDSNDEF
  End
End
/* nope, default it to view the dataset */
If Func = '' Then Func = 'V'

Upper Func                        /* translate the func to an action*/
Func = Left(Func,1)
Select
  When Func = 'E' Then Func = 'Edit'
  When Func = 'V' Then Func = 'View'
  When Func = 'B' Then Func = 'Browse'
  When Func = 'D' Then Func = 'Delete'
  When Func = 'L' Then Func = 'Listcat'
  When Func = 'X' Then Func = 'Level'
  When Func = 'M' Then Func = 'Memlist'
  When Func = 'P' Then Func = 'Pds'
  When Func = 'Z' Then Func = 'Save'
  When Func = 'C' Then Func = 'Command'
  Otherwise Do
    Say 'Function code' Func 'unknown...valid codes are:'
    Say 'E for Edit'
    Say 'V for View'
    Say 'B for Browse'
    Say 'D for Delete'
    Say 'L for Listcat'
    Say 'X for listcat level'
    Say 'M for Member list (PDSs only)'
    Say 'P for Pds-man (PDSs only)'
    Say 'Z for Save a backup of a PDS with .SAVE on the end'
    Say 'C to run a custom command (see FDCMD for more)'
    If FromProfile Then Do
      Say 'Removing default action' Func 'from ISPF profile.'
      Say 'Run FDSNDEF again to reset.'
      "VERASE FDSNDEF PROFILE"
    End
    Return
  End
End

"CONTROL ERRORS RETURN"
Interpret "Call" Func             /* call the appropriate routine */
"CONTROL ERRORS CANCEL"

Return
/*-------------------------------------------------------------------*/
/*- Create a member list for the dataset.                           -*/
/*-------------------------------------------------------------------*/
Memlist:

Bracket = Pos('(',Dsn)
If Bracket > 0 Then Do
  Dsn = Left(Dsn,Bracket-1)
End

"LMINIT DATAID(DATAID) DATASET('"Dsn"')"
If RC = 0 Then Do
  "MEMLIST DATAID("DATAID")"
  ReturnCode = RC
  Select
    When RC =  8 Then Say Dsn "- NO MEMBERS IN LIBRARY"
    When RC = 12 Then Say Dsn "- NOT A PARTITIONED DATASET"
    When RC = 16 Then Say Dsn "- DIALOG ERROR"
    When RC = 20 Then Say Dsn "- SEVERE ERROR"
    Otherwise Nop
  End
  "LMFREE DATAID("DATAID")"
End

Return
/*-------------------------------------------------------------------*/
/*- View the dataset (default).                                     -*/
/*-------------------------------------------------------------------*/
View:

"VGET FDSNMAC SHARED"
If RC = 0 & FDSNMAC <> '' Then Do
  "VIEW DATASET('"Dsn"') MACRO("FDSNMAC")"
  ReturnCode = RC
  "VERASE FDSNMAC SHARED"
End
Else Do
  "VIEW DATASET('"Dsn"')"
  ReturnCode = RC
End
Select
  When ReturnCode = 14 Then Say Dsn "- DATA SET OR MEMBER IN USE"
  When ReturnCode = 16 Then Say Dsn "- NO MEMBERS IN LIBRARY"
  When ReturnCode = 20 Then Call Browse
  Otherwise Nop
End

Return
/*-------------------------------------------------------------------*/
/*- Edit the dataset.                                               -*/
/*-------------------------------------------------------------------*/
Edit:

"VGET FDSNMAC SHARED"
If RC = 0 & FDSNMAC <> '' Then Do
  "EDIT DATASET('"Dsn"') MACRO("FDSNMAC")"
  ReturnCode = RC
  "VERASE FDSNMAC SHARED"
End
Else Do
  "EDIT DATASET('"Dsn"')"
  ReturnCode = RC
End
Select
  When ReturnCode = 14 Then Say Dsn "- DATA SET OR MEMBER IN USE"
  When ReturnCode = 16 Then Say Dsn "- NO MEMBERS IN LIBRARY"
  When ReturnCode = 20 Then Call Browse
  Otherwise Nop
End

Return
/*-------------------------------------------------------------------*/
/*- Browse the dataset.                                             -*/
/*-------------------------------------------------------------------*/
Browse:

"BROWSE DATASET('"Dsn"')"
ReturnCode = RC
Select
  When RC = 12 Then Say Dsn "- ZERO LENGTH DATA"
  When RC = 14 Then Say Dsn "- MEMBER NOT FOUND"
  When RC = 16 Then Say Dsn "- NO MEMBERS IN LIBRARY"
  When RC = 20 Then Say Dsn "- SEVERE ERROR"
  Otherwise Nop
End

Return
/*-------------------------------------------------------------------*/
/*- Do a listcat.                                                   -*/
/*-------------------------------------------------------------------*/
Listcat:

Bracket = Pos('(',Dsn)
If Bracket > 0 Then Dsn = Left(Dsn,Bracket-1)
Address TSO "LISTCAT ENTRY('"Dsn"') ALL"
ReturnCode = RC

Return
/*-------------------------------------------------------------------*/
/*- Do a listcat level.                                             -*/
/*-------------------------------------------------------------------*/
Level:

Bracket = Pos('(',Dsn)
If Bracket > 0 Then Dsn = Left(Dsn,Bracket-1)

Address TSO "LISTCAT ENTRY('"Dsn"') ALL"
DsnR = Reverse(Dsn)
Parse Var DsnR LastQual '.'
Parse Var LastQual Ver 'V' Gen 'G'
If Datatype(Gen) = 'NUM' & Datatype(Ver) = 'NUM' & ,
  Length(Gen) = 4 & Length(Ver) = 2 Then
  Dsn = Left(Dsn,Length(Dsn)-9)
Address TSO "LISTCAT LEVEL("Dsn") ALL"

Return
/*-------------------------------------------------------------------*/
/*- Run pdsman.                                                     -*/
/*-------------------------------------------------------------------*/
Pds:

Bracket = Pos('(',Dsn)
If Bracket > 0 Then Dsn = Left(Dsn,Bracket-1)

"SELECT CMD(LPDS '"Dsn"')"

Return
/*-------------------------------------------------------------------*/
/*- Run delete the dataset.                                         -*/
/*-------------------------------------------------------------------*/
Delete:

Bracket = Pos('(',Dsn)
If Bracket > 0 Then Dsn = Left(Dsn,Bracket-1)

Say "Do you really want to delete '"Dsn"'? (Y or N)"
Pull Reply
If Left(Reply,1) = 'Y' Then ,
  Address TSO "DELETE '"Dsn"'"

Return
/*-------------------------------------------------------------------*/
/*- Run a custom command against the dataset                        -*/
/*-------------------------------------------------------------------*/
Command:

"VGET FDCMD PROFILE"
If RC > 0 Then Do
  Say 'Custom command not found - run FDCMD first.'
  Return
End

Prompt = 0
If Word(FDCMD,1) = 'PROMPT' Then Do
  Prompt = 1
  FDCMD = Delword(FDCMD,1,1)
End

Addr = Word(FDCMD,1)
FDCMD = Delword(FDCMD,1,1)

Do While Pos('/',FDCMD) > 0
  Parse Var FDCMD First '/' Last
  FDCMD = Strip(First) "'"Dsn"'" Strip(Last)
End

If Prompt Then Do
  Say 'Run command "'FDCMD'"? (Y or N)'
  Pull Answer
  If Answer <> 'Y' Then Do
    Say 'Command not run.'
    Return
  End
End

Address Value Addr
FDCMD
If RC > 0 Then Say 'Return code =' RC

Return
/*-------------------------------------------------------------------*/
/*- Save the library                                                -*/
/*-------------------------------------------------------------------*/
Save:
Call SAVELIB "'"Dsn"'"
Return
