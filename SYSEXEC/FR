/* rexx */
Arg Rexx Func .

Signal On Failure
Signal On Syntax
Signal On Novalue

Call Main_Routine

Return
/*-------------------------------------------------------------------*/
/*- handle any problems encountered                                 -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(12);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(12);
Cleanup:
Return
/*-------------------------------------------------------------------*/
/*- This will find a Rexx in the sysproc/sysexec allocated libs.    -*/
/*-------------------------------------------------------------------*/
Main_Routine:

If Length(Rexx) = 1 Then Do
  Func = Rexx
  Rexx = ''
End

/* if the rexx was not passed get it from the cursor */
If Rexx = '' Then Do
  Address ISPEXEC
  GETLINE = ''
  "VPUT GETLINE SHARED"
  "SELECT CMD(%GETLINE)"
  "VGET (CSR CSRP LINE SCRW PANEL) SHARED"
  UpperLine = Line
  Upper UpperLine
  CmdPos = Pos('COMMAND',UpperLine)
  If CmdPos = 0 | CmdPos > 3 Then Do
    Do While CSRP > 1
      If Substr(Line,CSRP-1,1) = ' ' Then Leave
      CSRP = CSRP - 1
    End
    Rexx = Word(Substr(Line,CSRP),1)
  End
  Address TSO
End
Rexx = Translate(Rexx,,'%"()')
Rexx = Translate(Rexx,,"'")
Rexx = Strip(Rexx)

/* still can't find it, ask the user to supply one */
If Rexx = '' Then Do
  Say 'Enter the Rexx/Clist name you want to find...'
  Pull Rexx
End
If Rexx = '' Then Do
  Say 'Rexx/Clist name is missing.'
  Return
End

/* get a list of possible libs to edit */
Edit.0 = 0
Call LoadConcat
If Edit.0 = 0 Then Do
  Say 'Rexx/Clist' Rexx 'not found.'
  Return
End

/* if we found only one lib, go func it */
If Edit.0 = 1 Then Do
  Dsn = Word(Edit.1,1) || "(" || Rexx || ")"
  Call FDSN "'"Dsn"'" Func
  Return
End

/* let the user choose which one to edit */
Say Rexx 'was found in the following Rexx/Clist libraries...'
Do iEdit = 1 To Edit.0
  Say iEdit Edit.iEdit
End
Say 'Reply with a valid library number, or anything else to quit.'
Pull Reply
Reply = Strip(Reply)
If Datatype(Reply,'N') = 1 & Reply > 0 & Reply <= Edit.0 Then Do
  Dsn = Word(Edit.Reply,1) || "(" || Rexx || ")"
  Call FDSN "'"Dsn"'" Func
End

Return
/*-------------------------------------------------------------------*/
/*- check to see if the dsn(member) exists and add it to our list   -*/
/*-------------------------------------------------------------------*/
CheckDsn:

Arg Dsn DD .
CheckDsn = "'" || Dsn || "(" || Rexx || ")'"
If SYSDSN(CheckDsn) <> 'OK' Then Return
iEdit = Edit.0
iEdit = iEdit + 1
Edit.iEdit = Overlay(DD,Dsn,50)
Edit.0 = iEdit

Return
/*-------------------------------------------------------------------*/
/*- go thru the sysproc/sysexec concatenations                      -*/
/*-------------------------------------------------------------------*/
LoadConcat:

x = Outtrap('Dsn.')
"LISTA STATUS"
x = Outtrap('OFF')

OldDD = ''
Do iDsn = 1 To Dsn.0
  Dsn = Dsn.iDsn
  If Left(Dsn,1) = '-' Then Iterate
  If Left(Dsn,1) = ' ' Then Iterate
  If Pos('(',Dsn) > 0 Then Iterate /* for pds(mem) allocations */
  Dsn = Strip(Dsn)

  /* we know we'er working with a dataset now. */
  /* look ahead to see if there's a dd.        */
  iDD = iDsn + 1
  DD = Dsn.iDD
  Parse Var DD DD 'KEEP'
  DD = Strip(DD)
  If Words(DD) > 1 Then Iterate

  Select
    When DD = 'SYSEXEC' Then OldDD = DD  /* we're interested */
    When DD = 'SYSPROC' Then OldDD = DD
    When DD <> '' Then OldDD = ''        /* not interested */
    Otherwise Nop
  End
  /* OldDD is something, so add it to our list */
  If OldDD <> '' Then Call CheckDsn Dsn OldDD
End

Return
/* sample output from the lista status command */
--DDNAME---DISP--
MA133.TSO.PROD.SYSEXEC
  SYSEXEC  KEEP
SYS2.UTIL.REXX
           KEEP
SYS9.CYFUSION.EXECS
           KEEP
SYS9.SOFTPUB.EXEC
           KEEP
SYS9.XMITIP.NEW.EXEC
           KEEP
SYS1.SBPXEXEC
           KEEP
SYS9.CAI.OPSMVS.REXX
           KEEP
FFST.V120ESA.SEPWSRC1
           KEEP
