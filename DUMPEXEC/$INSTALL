/*********************************************************************/
/* Installation of SVCDumps                                          */
/*********************************************************************/
* decide if you are going to use the old standard SYS1.DUMPxx dump
  datasets or the dynamic dumps set up with the 'DD NAME=' operator
  command. this tool can handle either, but should you decide to use
  dynamic dumps, ensure that the GETDPFX exec is set up to reflect the
  dynamic name you choose. make sure you specify a date, time and
  sequence number in your dump prefix name. you should not pick a prefix
  length greater than 37 to allow room for work dataset suffixes.

* if you will not be using sms volumes for the dump datasets, update
  GETDVOL to place candidate, non-sms packs in a list for volume
  pooling.  this will require that you download and install MXI (a
  fantastic product you should not be without) from www.cbttape.org so
  that the DUMPSPCE exec can determine which of the GETDVOL volumes has
  the maximum freespace. if you don't want to use volume pooling, or
  can't install MXI, just specify one volume in this member, and make
  sure space is available on this pack by using aggressive archiving.

  NOTE: for some reason using MXI rexx calls for the OMVS security
  segment. if the SYSDUMP proc doesn't have access to this, you'll get
  security warnings, but the exec still works.

* review each of the other GET... execs and adjust to your shop
  standards.  i should have used a parmlib for this, but coding little
  functions was easier for this project.

* review ISPSLIB(JOBCARD) to update the job card to your standards.

* review each of the other members in ISPSLIB to use the tool of your
  choice for the various maintenance tasks that svcdumps performs.

* update exec SVCDUMPS to reflect your high level qualifiers and copy it
  to a common SYSEXEC dataset so that it's available for the system
  programmers. this is the ISPF interface exec.

* review and update SYSDUMP proc and copy it to a system proclib. in
  order for SYSDUMP to accurately determine the date/time on SYS1.DUMPxx
  system dumps, the SYSDUMP proc should be assigned a security id that
  can either issue the OPSCMD CA-OPS/MVS command processor, or the TSO/E
  CONSOLE command, and the method of choice should be updated in member
  GETDOPER. the proc will still work without these interfaces, but the
  time stamps for the dumps in the log and ispf table will not always be
  precise.

* create a gdg base for SYSDUMP's SYSTSPRT dataset and update the JCL to
  point to a stupid model DCB.  this allows you to review older output
  from SYSDUMP, and also prevents multiple SYSDUMPs from running at the
  same time due to the enq. this is desirable in a situation where
  something's dumping over and over again.

* install automation rules to start the SYSDUMP proc whenever a dump
  occurs. there are two messages to intercept:
  *IEA911E COMPLETE DUMP ON SYS1.DUMPxx 506
   DUMPID=011 REQUESTED BY JOB (*MASTER*)
   FOR ASID (0087)
   INCIDENT TOKEN: PRODPLEX PROD     04/08/2004 18:50:03

   IEA611I COMPLETE DUMP ON dynamic-dump-dataset-name
   DUMPID=001 REQUESTED BY JOB (*MASTER*)
   FOR ASID (004B)
   INCIDENT TOKEN: TESTPLEX MLAC     04/20/2004 14:46:01
   IEA650I SYSPLEX DUMP DIRECTORY ENTRY NOT PROCESSED

  start it in the form of "S SYSDUMP,PRM='DUMP=dump-name'".  sample
  ca-ops/mvs rules are in the opsmsg1 and opsmsg2 members.

* if you don't use system archiving to manage these files, in the wee
  hours of the morning, have automation start SYSDUMP with
  PRM='PURGE=60,ARCH=3' to archive and purge dumps based on the number
  of days old. see member opstod1. SYSDUMP will process commands in the
  order you specify them, so you should do the purge followed by the
  archive. if you reverse the order, you could expend cpu and io
  archiving a dump, only to have the purge step delete it.

* an hour or two later, start SYSDUMP with PRM='SYNC=Y' to syncronize
  the dump log with the correct statuses, and to check for orphaned
  dumps in the log and catalog. see member opstod2.

* if you are at os/390 2.10, install UW75207 if you plan to use IPCS
  with this product. this will ensure that the IPCSDDIR is freed when
  you exit IPCS.

* proceed to the $ivp member
