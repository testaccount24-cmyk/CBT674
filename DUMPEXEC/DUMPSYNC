/* rexx */
Signal On Failure
Signal On Syntax
Signal On Novalue

Return Main_Routine()
/*-------------------------------------------------------------------*/
/*- handle any problems encountered                                 -*/
/*-------------------------------------------------------------------*/
Failure: Say "Failure occured on line" Sigl; Call Cleanup; Exit(12);
Syntax:  Say "Syntax error on line"    Sigl; Call Cleanup; Exit(12);
Novalue: Say "Novalue used on line"    Sigl; Call Cleanup; Exit(12);
Cleanup:
Parse Source Source
Call DUMPCLN DumpTab,Source
Return
/*-------------------------------------------------------------------*/
/*- This will synconize the statuses of the log, and the log with   -*/
/*- the system catalog. prevents orphaned catalog entries.          -*/
/*-------------------------------------------------------------------*/
Main_Routine:

Say '>>>>>DUMPSYNC: Start of dump log syncronization'

Address ISPEXEC
/* convert the log to an ispf table. */
Parse Value LOG2TAB() With DumpTab TimeOpened .
If DumpTab = 4  Then Return 4
If DumpTab = 12 Then Signal Failure

/* sync it */
Call SyncLog
Call SyncCat

/* convert the table back to the log */
Call TAB2LOG DumpTab TimeOpened

Say '>>>>>DUMPSYNC: Dump log syncronization complete'

Return 0
/*-------------------------------------------------------------------*/
/*- syncs the log status with the actual status (disk, tape etc)    -*/
/*-------------------------------------------------------------------*/
SyncLog:

"TBTOP" DumpTab
Do Forever
  "TBSKIP" DumpTab "NUMBER(1)"
  If RC > 0 Then Leave

  Prefix = GETDPFX(Date,Time,Seq)
  Parse Value DUMPSTAT(Prefix) With Status1 .
  If Status1 = Status & Status1 <> 'DELE' Then Iterate

  Say '>>>>>DUMPSYNC: Updating' Prefix 'to' Status1 'status'

  /* setting hold to D will remove all orphaned datasets in tab2log */
  If Status1 = 'DELE' Then Hold = 'D'
  Status = Status1
  Stamp = DUMPSTMP()
  "TBMOD" DumpTab
End

Return
/*-------------------------------------------------------------------*/
/*- this will sync the catalog with the log. adds orphaned entries. -*/
/*-------------------------------------------------------------------*/
SyncCat:

Quals = GETDQUAL()
Dataset = ''
"LMDINIT LISTID(LISTID) LEVEL("GETDPFX()")"
Do Forever
  "LMDLIST LISTID("LISTID") OPTION(LIST) DATASET(DATASET)"
  If RC > 0 Then Leave
  /* make sure this is one of our datasets. don't delete anything else*/
  LastQual = Substr(Dataset,LastPos('.',Dataset)+1)
  If WordPos(LastQual,Quals) = 0 Then Iterate

  /* see if what we found in the catalog is left in the table. */
  "TBTOP" DumpTab
  "TBVCLEAR" DumpTab
  Parse Value GETDDATE(Dataset) With 'D' Date ' T' Time ' S' Seq .
  "TBGET" DumpTab "NOREAD"
  If RC = 0 Then Iterate

  Say '>>>>>DUMPSYNC: Adding cataloged dump to dump log:'
  Say '>>>>>DUMPSYNC:' Dataset

  /* if the dump is still around, get the dump title. */
  Prefix = GETDPFX(Date,Time,Seq)
  DumpIn = Prefix'.DUMP'
  If Sysdsn("'"DumpIn"'") = 'OK' Then Do
    Address TSO
    "ALLOC F(DUMPIN) DA('"DumpIn"') SHR REUSE"
    "EXECIO 1 DISKR DUMPIN (FINIS"
    "FREE F(DUMPIN)"
    Address ISPEXEC
    If Queued() <> 1 Then Signal Failure
    Pull 89 Title 188
  End
  Else Title = 'Orphaned dump'

  /* if this is in delete status, set hold to 'D' to ensure that all */
  /* other quals are cleaned up. handles when someone deletes the    */
  /* dump but doesn't delete the other quals. these will be deleted  */
  /* when the table is converted back to the log in tab2log.         */
  Parse Value DUMPSTAT(Prefix) With Status .
  If Status = 'DELE' Then Hold = 'D'
  Job = 'UNKNOWN'
  Stamp = DUMPSTMP()
  "TBADD" DumpTab
End
"LMDLIST LISTID("LISTID") OPTION(FREE)"
"LMDFREE LISTID("LISTID")"

Return
